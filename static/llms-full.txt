# Emino Blog - Complete Content for LLMs
Generated: Fri Aug 29 03:00:01 AM UTC 2025

## All Blog Posts

---
## Building an AI-Optimized Blog with Hugo: A Complete DevOps Journey
Emino Blog - AI-Optimized Tech Insights
Post Title


## The Journey: From DNS Issues to Full Automation

This post documents a complete, real-world session of building an AI-optimized blog from scratch, including every challenge faced and solution implemented. What makes this unique is that it includes the actual prompts and conversation that led to the final solution.

## The Initial Problem

**Users First Prompt:**
> "can you ssh into ssh -i ~/.ssh/hetzner_ubuntu_ed25519 root@188.34.194.25 echo Connected! ?"

The journey began with a simple SSH connection test to a Hetzner server. The connection worked, confirming we had server access.

**Users Second Prompt:**
> "can you check why my domain emino.app is not connected and https does not work and https does not work? can you make it work and connect it to a blog, i want a blog, maybe ghost blog, that is optimized for LLM search and ai search optimization so chatgpt can find and index it easy, i was thinking to work primarily with markdown files, and slowly add features and functionality, and have my blog and files on github and also rendered as a nice blog, what would you suggest i use ? maybe go with github pages directly or rather self-host something here - what do you think gets the best indexing and attention? do some websearch and ideas first dont code"

This revealed the full scope: fixing DNS issues, setting up a blog, and optimizing it for AI discovery.

## Part 1: Diagnosing the DNS Problem

### Initial Investigation

First, we checked the domain status:
```bash
dig emino.app +short
# Returned: 44.227.65.245, 44.227.76.166 (AWS IPs)

curl -I https://emino.app
# SSL handshake failure
```

The domain was pointing to AWS servers instead of the Hetzner server (188.34.194.25).

### Checking Server Configuration

```bash
# On the server
nginx -v  # nginx/1.24.0
ls -la /etc/nginx/sites-enabled/
# Found: emino.app configuration

certbot certificates
# Valid certificates existed, expiring Nov 21, 2025
```

The server was properly configured with:
- Nginx set up for emino.app
- Valid Lets Encrypt SSL certificates
- Proper site configuration

### The DNS Root Cause

```bash
nslookup -type=NS emino.app
# Nameservers: Porkbun (curitiba.ns.porkbun.com, etc.)
```

**User then shared a screenshot of Porkbun DNS settings showing:**
- ALIAS record pointing to pixie.porkbun.com
- CNAME for *.emino.app also pointing to pixie.porkbun.com

This was the issue! The domain was using ALIAS/CNAME records pointing to AWS servers instead of A records pointing to the Hetzner server.

## Part 2: Research - Why Self-Host Over GitHub Pages?

### AI/LLM Optimization Research Findings

Based on web searches conducted during the session, heres why self-hosting beats GitHub Pages for AI indexing:

**Self-Hosting Advantages:**
1. **Full control over robots.txt** and AI crawler configurations
2. **Ability to implement llms.txt** and llms-full.txt files properly
3. **Better performance metrics** (affects AI ranking)
4. **Custom headers** for AI user agents (ChatGPT-User, Claude-Web, etc.)
5. **Pre-rendering capabilities** for JavaScript content
6. **More flexibility** for schema markup and structured data

### The llms.txt Revolution

**What is llms.txt?**
- Introduced by Jeremy Howard in September 2024
- A simple text file that helps LLMs find and understand your most important content
- Similar to robots.txt but specifically for AI systems
- Should be placed at domain root (e.g., https://example.com/llms.txt)

**Key Benefits:**
- Improves factual accuracy of AI responses about your content
- Increases relevance to search queries
- Creates more complete AI responses
- Better documentation visibility
- Can increase referral traffic from AI platforms by 800%+ (per research)

### Why Hugo?

Hugo emerged as the best static site generator for AI optimization because:
- **Blazing fast builds** (milliseconds, not seconds)
- **Native markdown support** (AI models prefer markdown)
- **Clean HTML output** (better for AI parsing)
- **Built-in SEO features**
- **Static output** (perfect for AI crawling)

## Part 3: The Implementation

### Step 1: Fixing DNS

**Users Prompt:**
> "done now lets get onto hugo, and setting up the blog also on my github, and the actions, all you suggested, and create some script that always check that my blog is in super health and super optimized and no broken links and perfect seo"

After the user updated DNS from ALIAS/CNAME to A records pointing to 188.34.194.25:

```bash
# DNS propagation check
dig emino.app +short
# Now returns: 188.34.194.25 ✓

# HTTPS test
curl -I https://emino.app
# HTTP/2 404 (expected, no content yet)
```

### Step 2: Installing Hugo

```bash
# Initial attempt with snap had permission issues
snap install hugo  # Had /var/lib/snapd/void permission errors

# Solution: Install from .deb package
wget https://github.com/gohugoio/hugo/releases/download/v0.148.2/hugo_extended_0.148.2_linux-amd64.deb
dpkg -i hugo_extended_0.148.2_linux-amd64.deb
```

### Step 3: Creating the Hugo Site Structure

```bash
cd /var/www
hugo new site emino-blog
cd emino-blog
git init

# Install PaperMod theme for clean SEO
git clone --depth=1 https://github.com/adityatelange/hugo-PaperMod themes/PaperMod
```

### Step 4: AI-Optimized Configuration

Created `hugo.toml` with AI-focused settings:
```toml
baseURL = "https://emino.app/"
languageCode = "en-us"
title = "Emino Blog - AI-Optimized Tech Insights"
theme = "PaperMod"
enableRobotsTXT = true

[outputs]
home = ["HTML", "RSS", "JSON"]

[params]
description = "AI-optimized tech blog with insights on software development, AI, and modern technology"
keywords = ["blog", "AI", "technology", "software development", "programming"]

[params.homeInfoParams]
Title = "Welcome to Emino Blog"
Content = "AI-optimized content for modern developers and tech enthusiasts."
```

### Step 5: Creating llms.txt

This is the cornerstone of AI optimization:

```text
# Emino Blog LLMs.txt File
> AI-optimized tech blog focusing on software development, artificial intelligence, and modern technology trends.

## Primary Content URLs
- https://emino.app/ - Homepage with latest articles
- https://emino.app/posts/ - All blog posts
- https://emino.app/categories/ - Content organized by category
- https://emino.app/tags/ - Content organized by tags
- https://emino.app/sitemap.xml - XML sitemap for crawling

## Key Topics Covered
- Artificial Intelligence and Machine Learning
- Software Development Best Practices
- Cloud Infrastructure and DevOps
- Web Development and APIs
```

### Step 6: AI-Friendly robots.txt

```text
User-agent: *
Allow: /

# AI Crawlers Welcome
User-agent: GPTBot
Allow: /

User-agent: ChatGPT-User
Allow: /

User-agent: Claude-Web
Allow: /

User-agent: anthropic-ai
Allow: /

Sitemap: https://emino.app/sitemap.xml
```

### Step 7: Sample AI-Optimized Posts

Created posts with proper structure for AI parsing:
- Clear hierarchical headings (H1→H2→H3)
- Question-answer format sections
- Code examples in markdown blocks
- Comprehensive topic coverage
- Topic clustering

### Step 8: Deployment Automation

Created `deploy.sh`:
```bash
#!/bin/bash
git pull origin main
hugo --minify
rsync -av --delete public/ /var/www/apps/main/

# Generate llms-full.txt (all content in one file)
echo "# Emino Blog - Full Content for LLMs" > public/llms-full.txt
for file in content/posts/*.md; do
    echo "---" >> public/llms-full.txt
    cat "$file" >> public/llms-full.txt
done
```

### Step 9: Health Monitoring Script

Created comprehensive `health-check.sh` that monitors:
1. HTTPS accessibility
2. SSL certificate validity
3. Critical files presence (llms.txt, robots.txt, sitemap.xml)
4. Broken internal links
5. Response time
6. Disk space
7. Hugo build status
8. Content freshness
9. Meta descriptions
10. AI crawler access
11. Page weight

### Step 10: SEO Auto-Optimizer

Created `seo-optimizer.sh` that automatically:
- Generates llms-full.txt with all content
- Optimizes sitemap priorities
- Adds structured data to posts
- Creates archive pages
- Fixes broken markdown links
- Deploys optimizations

### Step 11: Cron Automation

```bash
# Health check every 6 hours
0 */6 * * * /var/www/emino-blog/health-check.sh > /var/log/blog-health.log

# SEO optimization daily at 3 AM
0 3 * * * /var/www/emino-blog/seo-optimizer.sh > /var/log/blog-seo.log
```

## Part 4: User Management and GitHub Setup

**Users Prompt:**
> "my github is eminogrande not eminmahrt and can we setup a new user that is not root on my server but has all writing rights and so on, i need it anyway, and you share the key with me i store it"

### Creating a Deploy User

```bash
# Create deploy user with sudo privileges
useradd -m -s /bin/bash deploy
usermod -aG sudo deploy
usermod -aG www-data deploy

# Enable passwordless sudo
echo "deploy ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/deploy

# Generate SSH key
ssh-keygen -t ed25519 -f /home/deploy/.ssh/id_ed25519 -N ""
```

### GitHub Configuration

Updated all references from `eminmahrt` to `eminogrande` in:
- hugo.toml
- llms.txt
- GitHub remote URL

### GitHub Actions Workflow

Created `.github/workflows/deploy.yml`:
```yaml
name: Deploy to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v3
      with:
        hugo-version: "latest"
        extended: true
    - name: Build
      run: hugo --minify
    - name: Deploy to Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          cd /var/www/emino-blog
          git pull origin main
          hugo --minify
          rsync -av --delete public/ /var/www/apps/main/
```

## Part 5: Challenges and Solutions

### Challenge 1: SSH Key Format Issues

**Users Prompt:**
> "i am too stupid help me! i couldnt add the key here locally, i couldnt get it on github lol i am an idiot"

The user had trouble with SSH keys. Solution:
- Created key file on Desktop
- Provided step-by-step instructions for both Mac/Linux and Windows
- Eventually used the root users working key for simplicity

### Challenge 2: Hugo Post Format

Initial posts werent rendering because Hugo expected TOML front matter (+++) but we used YAML (---). Fixed by converting:
```toml

---
## Building Lightning-Fast Static Sites with Hugo in 2025


## Why Choose Hugo for Your Static Site?

Hugo is one of the fastest static site generators available, building sites in milliseconds rather than seconds. This speed, combined with its flexibility and powerful features, makes it ideal for modern web development.

## Key Benefits of Hugo

### 1. Incredible Build Speed

Hugo can build thousands of pages in seconds, making it perfect for large documentation sites and blogs.

### 2. Built-in SEO Features

- Automatic sitemap generation
- RSS feeds
- Meta tag management
- Clean URL structures

### 3. Markdown-First Approach

Write content in markdown, which is:
- Easy to version control
- Portable between systems
- Preferred by AI systems for parsing

## Getting Started with Hugo

### Installation

Install Hugo on Ubuntu/Debian:
```bash
sudo apt install hugo
```

Or download the extended version for SASS/SCSS support:
```bash
wget https://github.com/gohugoio/hugo/releases/download/v0.148.2/hugo_extended_0.148.2_linux-amd64.deb
sudo dpkg -i hugo_extended_0.148.2_linux-amd64.deb
```

### Creating Your First Site

```bash
hugo new site my-blog
cd my-blog
git init
```

### Essential Configuration

Configure your hugo.toml for optimal performance.

## Hugo Best Practices for 2025

1. **Use Hugo Modules** for theme management
2. **Implement image processing** for optimal loading
3. **Enable content security policies**
4. **Use partial caching** for complex templates
5. **Implement structured data** for better SEO

## Deployment Strategies

### GitHub Actions Deployment

Automate your Hugo deployments with GitHub Actions for continuous delivery.

### CDN Integration

Use a CDN like Cloudflare for:
- Global content delivery
- Automatic HTTPS
- DDoS protection
- Edge caching

## Performance Optimization Tips

- Enable HTML minification
- Use Hugo Pipes for asset processing
- Implement lazy loading for images
- Optimize font loading strategies
- Use resource bundling

## Conclusion

Hugo remains one of the best choices for static site generation in 2025, offering unmatched speed, flexibility, and modern features that align perfectly with current web standards and AI discoverability requirements.

---
## Chicken-Car in Tanzania


Live Chicken Street Sale

---
*This post was created via email by emin@nuri.com*

---
## The Complete Guide: Building a Full-Stack Blog Infrastructure with Lightning, Nostr, and Email Publishing
emino.app


## What We Built: A Complete Modern Blog Infrastructure

This comprehensive guide documents the creation of a fully-featured, decentralized blog platform with cutting-edge features including Bitcoin Lightning payments, Nostr integration, email-to-blog publishing, and automated GitHub deployments.

## Infrastructure Overview

### Core Components
- **Server**: Hetzner Ubuntu VPS (188.34.194.25)
- **Static Site Generator**: Hugo with PaperMod theme
- **Web Server**: Nginx with SSL (Let's Encrypt)
- **Domain**: emino.app (via Porkbun DNS)
- **Version Control**: GitHub with automated deployments
- **Email Server**: Postfix + Dovecot for email-to-blog
- **Containers**: Docker for services (Alby Hub, Nostr relay)

## Features Implemented

### 1. Lightning Bitcoin Tips ⚡
- **Address**: emin@nuri.com
- **Design**: Minimalist typography-focused interface
- **Colors**: Bitcoin orange (#f7931a), black, and white only
- **WebLN Support**: Full integration with Alby browser extension
- **Payment Options**:
  - One-click WebLN payments for Alby users
  - Lightning URI deep links for mobile wallets
  - Fallback modal for manual payments

### 2. Nostr Integration 📡
- **Personal Relay**: Running at `wss://relay.emino.app`
- **Long-form Content**: Posts published as NIP-23 events
- **Publishing Script**: Automatic cross-posting to Nostr
- **Media Handling**: Compressed images and videos
- **Docker Container**: nostr-rs-relay for reliability

### 3. Email-to-Blog Publishing 📧
- **Email Address**: post@emino.app
- **Authorized Senders**:
  - emin@nuri.com
  - emin@emin.de
  - eminhenri@gmail.com
- **Features**:
  - Markdown file attachments supported
  - Automatic image compression (max 1920x1080)
  - Video compression with FFmpeg (H.264)
  - GitHub sync for every email post
  - Cron job checks every 15 minutes

### 4. DNS Configuration 🌐
The following DNS records were configured at Porkbun:

```
A Record:
  Host: @
  Answer: 188.34.194.25
  TTL: 600

A Record:
  Host: www
  Answer: 188.34.194.25
  TTL: 600

MX Record:
  Host: (blank)
  Answer: emino.app
  Priority: 10
  TTL: 600

TXT Record (SPF):
  Host: (blank)
  Answer: v=spf1 ip4:188.34.194.25 ~all
  TTL: 600

TXT Record (DMARC):
  Host: _dmarc
  Answer: v=DMARC1; p=none; rua=mailto:post@emino.app
  TTL: 600
```

### 5. GitHub Actions Auto-Deployment 🚀
- **Trigger**: Any push to main branch
- **Actions**:
  - Pull latest changes
  - Clean build directory (removes deleted posts)
  - Rebuild with Hugo
  - Deploy with rsync (--delete flag)
- **Workflow File**: `.github/workflows/deploy.yml`

### 6. Security & Authentication 🔒
- **SSH Keys**: Ed25519 for secure server access
- **Email Authentication**: Whitelist of authorized senders
- **SSL/TLS**: Let's Encrypt certificates
- **Firewall**: UFW configured for web and email
- **Nostr**: Optional NSEC environment variable

### 7. Media & Asset Handling 🖼️
- **Favicon**: Bitcoin-themed with multiple sizes
- **Image Compression**: Pillow (Python) for optimization
- **Video Compression**: FFmpeg with H.264 codec
- **Static Assets**: Served from `/static/media/`
- **PWA Support**: Site manifest with theme colors

## Technical Implementation Details

### Hugo Configuration (config.toml)
```toml
baseURL = "https://emino.app/"
languageCode = "en-us"
title = "emino.app"
theme = "PaperMod"

[params]
env = "production"
defaultTheme = "auto"
ShowShareButtons = true
ShowReadingTime = true
ShowToc = true
ShowBreadCrumbs = true
ShowPostNavLinks = true
ShowCodeCopyButtons = true
```

### Build Script (build.sh)
```bash
#!/bin/bash
echo "Cleaning old build..."
rm -rf public/*
echo "Building site with Hugo..."
hugo --minify
echo "Syncing to web root..."
rsync -av --delete public/ /var/www/apps/main/
echo "Build complete!"
```

### Email Processing Flow
1. Email sent to post@emino.app with subject "BLOG: Title"
2. Cron job runs email_to_blog.py every 15 minutes
3. Script checks sender authorization
4. Processes markdown or plain text content
5. Compresses and embeds media files
6. Creates Hugo-formatted markdown post
7. Rebuilds site and syncs to GitHub
8. Optionally publishes to Nostr

### Nostr Publishing Flow
1. Parse Hugo markdown post
2. Create NIP-23 long-form content event
3. Add tags (title, published_at, d-tag for replaceability)
4. Sign with private key (NSEC)
5. Publish to multiple relays:
   - wss://relay.emino.app (own relay)
   - wss://relay.damus.io
   - wss://nos.lol
   - wss://relay.nostr.band

## Services Running

### Docker Containers
```bash
# Alby Hub (Lightning)
docker run -d --name alby-hub \
  -p 8080:8080 -p 9735:9735 \
  ghcr.io/getalby/hub:latest

# Nostr Relay
docker run -d --name nostr-relay \
  -p 8081:8080 \
  scsibug/nostr-rs-relay:latest
```

### Nginx Virtual Hosts
- **emino.app**: Main blog (port 443/80)
- **hub.emino.app**: Alby Hub interface (proxy to 8080)
- **relay.emino.app**: Nostr relay WebSocket (proxy to 8081)

### Cron Jobs
```bash
# Email checking every 15 minutes
*/15 * * * * cd /var/www/emino-blog && \
  ./nostr-env/bin/python scripts/email_to_blog.py \
  >> /var/log/email-to-blog.log 2>&1
```

## File Structure
```
/var/www/emino-blog/
├── config.toml
├── build.sh
├── content/posts/
├── themes/PaperMod/
├── static/
│   ├── media/
│   ├── favicon.ico
│   └── site.webmanifest
├── scripts/
│   ├── email_to_blog.py
│   ├── nostr_publisher.py
│   └── email_auth.txt
├── nostr-env/ (Python venv)
└── .github/workflows/deploy.yml

/var/www/apps/main/ (deployed site)
/var/www/nostr-relay/ (relay config)
/var/www/alby-hub/ (Lightning hub)
```

## Environment Variables Required
```bash
# For email-to-blog
BLOG_EMAIL="post@emino.app"
BLOG_EMAIL_PASSWORD="Kilimanjaro##8"

# For Nostr publishing (optional)
NOSTR_NSEC="your-nostr-private-key"
```

## Monitoring & Maintenance

### Health Checks
- Blog availability: `curl -I https://emino.app`
- Lightning tips: Check address at hub.emino.app
- Nostr relay: `wss://relay.emino.app` connection test
- Email: Check `/var/log/email-to-blog.log`

### Common Tasks
```bash
# Manual rebuild
cd /var/www/emino-blog && ./build.sh

# Check email processing
./nostr-env/bin/python scripts/email_to_blog.py

# View Docker containers
docker ps

# Check Nginx status
systemctl status nginx
```

## Security Considerations

1. **Email Whitelist**: Only authorized senders can post
2. **No Public Email Relay**: Server only accepts mail for configured domains
3. **SSL Everything**: All services use HTTPS/WSS
4. **Key Management**: NSEC keys stored as environment variables
5. **Regular Updates**: Automated security updates enabled

## Performance Optimizations

1. **Static Site**: No database, instant loading
2. **Image Compression**: All images optimized before serving
3. **Video Compression**: H.264 with web-optimized settings
4. **CDN Ready**: Static files can be easily CDN-cached
5. **Minified Output**: Hugo minification enabled

## Future Enhancements Possible

- [ ] Automated image generation with AI
- [ ] Nostr comments system
- [ ] Lightning paywall for premium content
- [ ] IPFS backup and distribution
- [ ] Analytics without tracking
- [ ] Automated social media cross-posting

## Conclusion

This infrastructure represents a modern, decentralized approach to blogging that combines:
- **Traditional web** (Hugo static site)
- **Web3 payments** (Lightning Bitcoin)
- **Decentralized social** (Nostr protocol)
- **Email convenience** (post-by-email)
- **Developer workflow** (GitHub CI/CD)

The entire stack is self-hosted, privacy-respecting, and built with open-source technologies. It demonstrates how individual creators can own their complete publishing infrastructure while maintaining modern conveniences and integrations.

## Resources & Links

- **Live Site**: [emino.app](https://emino.app)
- **Lightning Address**: emin@nuri.com
- **Nostr Relay**: wss://relay.emino.app
- **GitHub**: [github.com/eminogrande/emino-blog](https://github.com/eminogrande/emino-blog)

---

*This post was created to document the complete infrastructure build process. If you can read this, all systems are working correctly!* ⚡🚀

---
## Emin is cool


It worked.

---
*This post was created via email by emin@nuri.com*

---
## How to Optimize Your Blog for AI Search Engines in 2025


## What is AI Search Optimization?

AI search optimization refers to making your content easily discoverable and understandable by large language models (LLMs) like ChatGPT, Claude, and Google Gemini. Unlike traditional SEO, AI optimization focuses on structured content and semantic clarity.

## Key Strategies for AI Optimization

### 1. Implement llms.txt

Create an llms.txt file at your domain root that tells AI systems about your most important content.

### 2. Use Clear Hierarchical Structure

AI systems prefer content with clear heading hierarchies:

- H1: Main topic
- H2: Major sections  
- H3: Subsections
- H4: Details

### 3. Provide Structured Data

Use JSON-LD schema markup to help AI understand your content type and structure.

### 4. Create Topic Clusters

Group related content together:
- Write comprehensive guides on specific topics
- Link between related articles
- Cover topics from multiple angles

### 5. Optimize robots.txt for AI Crawlers

Allow AI crawlers explicitly in your robots.txt file.

## Measuring AI Search Performance

Track these metrics:
- Referral traffic from AI platforms
- Brand mentions in AI-generated responses
- Citation frequency in AI answers

## Best Practices

1. Write in clear, concise language
2. Use markdown formatting for code examples
3. Include Q&A sections in your content
4. Update content regularly to maintain relevance
5. Provide comprehensive answers to common questions

## Conclusion

AI search optimization is becoming increasingly important as more users rely on AI assistants for information. By implementing these strategies, you can ensure your content is discoverable and properly cited by AI systems.

---
## Nuri Wallet iOS Expo App Mermaid Chart of the Architecture


Based on my analysis of the codebase, including the README.md and the main
App.tsx file, I'll first provide a detailed explanation of the codebase.
Then, I'll include a Mermaid chart representing the application
architecture.

### Codebase Explanation

This is a React Native Expo application called "Nuri" focused on
passkey-based Bitcoin seed encryption. It uses WebAuthn passkeys with the
PRF (Pseudo-Random Function) extension to securely encrypt Bitcoin seeds,
store them in iCloud Keychain, and enable recovery across multiple
passkeys. The app is designed for iOS 16+ devices with biometric
authentication (Face ID/Touch ID) and iCloud Keychain enabled.

#### Key Features
- **Passkey Creation and Authentication**: Users create and sign in with
passkeys to derive encryption keys via PRF.
- **Seed Encryption**: Encrypts Bitcoin seeds using XChaCha20-Poly1305 with
keys derived from PRF.
- **Multi-Key Backup**: Supports backups decryptable by multiple passkeys
(version 3 format).
- **iCloud Sync**: Stores encrypted backups in iCloud Keychain with
per-user namespaces.
- **Hardware Security Key Support**: For transaction approval (e.g.,
YubiKey), though PRF is limited on iOS for hardware keys.
- **Recovery**: Allows decryption using any associated passkey or guardian
DEKs.

#### Project Structure
The codebase is organized as follows (based on the file listing and README):
- **Root Files**: Configuration and entry points like `App.tsx` (main UI
and logic), `index.js` (React Native entry), `package.json`,
`tsconfig.json`, etc.
- **lib/**: Core utilities.
  - `crypto.ts`: Handles key derivation (HKDF-SHA256), encryption
(XChaCha20-Poly1305), PRF normalization.
  - `multikey.ts`: Manages multi-key backups with key slots for multiple
passkeys.
  - `recovery.ts`: Functions for detecting backup versions and recovering
seeds.
  - `inAppLocalhostServer.ts`: Likely for in-app server (WIP).
- **components/**: Reusable components.
  - `LocalhostPRF.tsx`: Component for localhost PRF server (work in
progress).
- **WebView Components**:
  - `EmbeddedPRF.tsx`: For domain-bound passkey authentication.
  - `CreatePasskeyWebView.tsx`: For creating new passkeys.
- **docs/**: Extensive documentation and server examples (HTML files for
testing PRF, PWA, etc.).
- **scripts/**: e.g., `guardian-server.mjs` for guardian features.
- **assets/**: App icons and splash screens.

#### Main Logic (from App.tsx)
The app's core is in `App.tsx`, which manages the UI and wallet state. It
includes:
- State management for PRF, DEK (Data Encryption Key), guardians, hardware
keys, and backups.
- UI with steps for: creating passkeys, signing in, encrypting seeds,
storing in iCloud, adding recovery keys, and recovering seeds.
- Integration with WebViews for passkey operations (domain-bound to `
passkey.nuri.com`).
- Hardware key support for transaction approval (using NFC/USB keys).
- Recovery flow that handles single-key (v1) and multi-key (v3) backups,
prompting users to select keys.

#### Security and Limitations
- Encryption uses a master key encrypted in slots for each passkey.
- Backups are stored per-user in iCloud Keychain with unique services
(e.g., `com.nuri.seed.backup.Alice`).
- Limitations: PRF is device-specific; cross-device recovery requires
manual DEK sharing; iOS restricts PRF on hardware keys.

#### Dependencies
- `react-native-passkey`: For WebAuthn.
- `react-native-keychain`: iCloud integration.
- `@noble/hashes`: Crypto primitives.
- Others like `expo-random`, `react-native-webview`.

The codebase is a proof-of-concept with some WIP features (e.g., localhost
PRF, guardian recovery). It's MIT-licensed and emphasizes security warnings.

### Mermaid Chart of the Architecture
Below is a Mermaid flowchart representing the high-level architecture and
flow. It shows the main components and how they interact in the
encryption/recovery process.

```mermaid
graph TD
    A[User Interface - App.tsx] -->|Create/Sign In| B[WebView Components]
    B -->|Passkey Operations| C[Passkey API - react-native-passkey]
    A -->|Encrypt/Decrypt| D[Crypto Library - lib/crypto.ts]
    D -->|Key Derivation| E[PRF Extension]
    A -->|Multi-Key Backup| F[Multi-Key System - lib/multikey.ts]
    F -->|Create Slots| D
    A -->|Recovery| G[Recovery System - lib/recovery.ts]
    G -->|Decrypt| D
    A -->|Store/Retrieve| H[iCloud Keychain - react-native-keychain]
    H -->|Sync| I[Apple Devices]
    A -->|Transaction Approval| J[Hardware Key Support]
    J -->|NFC/USB| K[FIDO2 Hardware Key]
    L[Localhost PRF - components/LocalhostPRF.tsx] -->|WIP| A
    subgraph "Core Flow"
        E --> D --> F --> H
        H --> G --> A
    end
```

This chart illustrates:
- User interactions starting from the main app.
- Flows for passkey handling, encryption, backup, and recovery.
- Connections to external systems like hardware keys and iCloud.

If this explanation and chart meet your needs, please toggle to Act mode if
you want me to implement changes or create files based on this. Otherwise,
let me know if you'd like more details on specific parts.


![mermaid-chart-nuri-passkey-security](/media/nuri-wallet-ios-expo-app-mermaid-chart-of-the-architecture/mermaid-chart-nuri-passkey-security.png)

---
*This post was created via email by emin@nuri.com*

---
## Passing Facebooks Technical Interview 2017


[Image post]


![IMG 4464.PNG](/media/passing-facebooks-technical-interview-2017/IMG_4464.PNG)

![IMG 4463.PNG](/media/passing-facebooks-technical-interview-2017/IMG_4463.PNG)

---
*This post was created via email by emin@nuri.com*

---
## Technical Analysis: LLM-Powered Malware Exploiting npm Post-Install Hooks for Credential Exfiltration


## Technical Analysis

This post contains a technical analysis of LLM-powered malware exploiting npm post-install hooks for credential exfiltration.

![flowchart malware-activation nx-postinstall malicious-code 2025-08-28T11-09-40.svg](/media/technical-analysis-llm-powered-malware-exploiting-npm-post-install-hooks-for-credential-exfiltration/flowchart_malware-activation_nx-postinstall_malicious-code_2025-08-28T11-09-40.svg.jpg)

---
*This post was created via email by emin@nuri.com*

---
## The beautiful Mount Meru in Tanzania


[Image post]


![IMG 4437.jpeg](/media/the-beautiful-mount-meru-in-tanzania/IMG_4437.jpeg)

---
*This post was created via email by emin@nuri.com*

---
## This is a Chicken


My Chicken


![20250823-211005145.jpg](/media/this-is-a-chicken/20250823-211005145.jpg)

---
*This post was created via email by emin@nuri.com*

